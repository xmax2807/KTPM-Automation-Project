// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using ProjectCaseStudy.Data;
using Xunit;



namespace ProjectCaseStudy
{
    public abstract class TheoryData : IEnumerable<object[]>
    {
        public readonly List<object[]> data = new();

        protected void AddRow(params object[] values)
        {
            data.Add(values);
        }

        public IEnumerator<object[]> GetEnumerator()
        {
            return data.GetEnumerator();
        }
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }
    public abstract class TestDataBase<T> : TheoryData
    {
        protected abstract JsonIO<T> IO { get; }
        protected abstract string FilePath { get; }
        
        public TestDataBase()
        {
            var data = IO.LoadFile(FilePath, 1000);
            if (data == null) return;

            for (int i = 0; i < data.Count; i++)
            {
                Add(data[i]);
            }
        }
        public void Add(T data)
        {
            if (data == null) return;
            AddRow(data);
        }
    }

    public class TestDataJobTitle : TestDataBase<JobTitleData>
    {
        private readonly JobTitleIO _io = new();

        protected override JsonIO<JobTitleData> IO => _io;

        protected override string FilePath => "Data\\data.json";

    }

    public class TestDataBuzz : TestDataBase<BuzzPost>
    {
        private readonly BuzzPostIO _io = new();
        protected override JsonIO<BuzzPost> IO => _io;

        protected override string FilePath => "Data\\dataBuzz.json";
    }

    public class TestDataEmployee : TestDataBase<Employee>
    {
        private readonly EmployeeIO _io = new();
        protected override JsonIO<Employee> IO => _io;
        protected override string FilePath => "Data\\dataEmployee0.json";

    }
    public class TestDataEmployee2 : TestDataEmployee
    {
        protected override string FilePath => "Data\\dataEmployee1.json";
    }

    public class TestDataAccount : TestDataBase<Account>
    {
        private readonly AccountIO _io = new();
        protected override JsonIO<Account> IO => _io;

        protected override string FilePath => "Data\\dataAccount.json";
    }

    public abstract class SuiteTests<T, V> : IClassFixture<T> where T : FixtureBase<V> where V : Browser
    {
        private readonly T Fixture;
        public SuiteTests(T fixture)
        {
            Fixture = fixture;
        }
        

        [Theory]
        [ClassData(typeof(TestDataJobTitle))]
        public void Performance(JobTitleData data)
        {
            if (data == null) return;
            try
            {
                Fixture.Driver?.FindElement(By.Id("btnAdd")).Click();
            }
            catch
            {
                //Navigate to job title
                Actions mouseMove = new(Fixture.Driver);
                var adminModule = Fixture.Driver?.FindElement(By.Id("menu_admin_viewAdminModule"));
                mouseMove.MoveToElement(adminModule).Perform();
                var adminJob = Fixture.Driver.FindElement(By.Id("menu_admin_Job"));
                mouseMove.MoveToElement(adminJob).Perform();
                Fixture.Driver.FindElement(By.Id("menu_admin_viewJobTitleList")).Click();

                Fixture.Driver.FindElement(By.Id("btnAdd")).Click();
            }
            Fixture.Driver.FindElement(By.Id("jobTitle_jobTitle")).Click();
            Fixture.Driver.FindElement(By.Id("jobTitle_jobTitle")).SendKeys(data.Title);
            Fixture.Driver.FindElement(By.Id("jobTitle_jobDescription")).Click();
            Fixture.Driver.FindElement(By.Id("jobTitle_jobDescription")).SendKeys(data.Description);
            //Fixture.Driver.FindElement(By.Id("jobTitle_jobSpec")).Click(); => cause error (can't click)
            Fixture.Driver.FindElement(By.Id("jobTitle_jobSpec")).SendKeys(data.File);
            Fixture.Driver.FindElement(By.Id("jobTitle_note")).Click();
            Fixture.Driver.FindElement(By.Id("jobTitle_note")).SendKeys(data.Note);
            Fixture.Driver.FindElement(By.Id("btnSave")).Click();
        }


        //[Theory]
        //[ClassData(typeof(TestDataBuzz))]
        //public void BuzzUpload(BuzzPost data)
        //{
        //    Fixture.Driver.Navigate().GoToUrl("http://localhost/orangehrm/symfony/web/index.php/buzz/viewBuzz");
        //    Fixture.Driver.FindElement(By.Id("images-tab-label")).Click();
        //    Fixture.Driver.FindElement(By.Id("phototext")).Click();
        //    Fixture.Driver.FindElement(By.Id("phototext")).SendKeys(data.Content);
        //    //Fixture.Driver.FindElement(By.Id("image-upload-button")).Click();
        //    for(int i = 0; i < data.Images.Length; i++)
        //    {
        //        Fixture.Driver.FindElement(By.Id("photofile")).SendKeys(data.Images[i]);
        //    }
        //    Fixture.Driver.FindElement(By.Id("imageUploadBtn")).Click();
        //}

        //[Theory]
        //[ClassData(typeof(TestDataEmployee))]
        public void AddEmployee(Employee data)
        {
            AutoAddEmployee(data);
        }

        //[Theory]
        //[ClassData(typeof(TestDataEmployee2))]
        public void AddEmployee2(Employee data)
        {
            AutoAddEmployee(data);
        }

        private void AutoAddEmployee(Employee data)
        {
            Fixture.Driver.Navigate().GoToUrl("http://localhost/orangehrm/symfony/web/index.php/pim/addEmployee");
            Fixture.Driver.FindElement(By.Id("menu_pim_addEmployee")).Click();
            Fixture.Driver.FindElement(By.Id("firstName")).Click();
            Fixture.Driver.FindElement(By.Id("firstName")).SendKeys(data.FirstName);
            Fixture.Driver.FindElement(By.Id("middleName")).Click();
            Fixture.Driver.FindElement(By.Id("middleName")).SendKeys(data.Username);
            Fixture.Driver.FindElement(By.Id("lastName")).Click();
            Fixture.Driver.FindElement(By.Id("lastName")).SendKeys(data.LastName);
            Fixture.Driver.FindElement(By.Id("employeeId")).Click();
            Fixture.Driver.FindElement(By.Id("employeeId")).Clear();
            Fixture.Driver.FindElement(By.Id("employeeId")).SendKeys(data.ID);
            Fixture.Driver.FindElement(By.Id("chkLogin")).Click();
            try
            {
                Fixture.Driver.FindElement(By.Id("user_name")).Click();
            }
            catch
            {
                Fixture.Driver.FindElement(By.Id("chkLogin")).Click();
                Fixture.Driver.FindElement(By.Id("user_name")).Click();
            }
            Fixture.Driver.FindElement(By.Id("user_name")).SendKeys(data.Username);
            Fixture.Driver.FindElement(By.Id("user_password")).Click();
            Fixture.Driver.FindElement(By.Id("user_password")).SendKeys(data.Password);
            Fixture.Driver.FindElement(By.Id("re_password")).Click();
            Fixture.Driver.FindElement(By.Id("re_password")).SendKeys(data.Password);
            Fixture.Driver.FindElement(By.Id("btnSave")).Click();
        }

        //[Fact]
        public void DeleleEmployee()
        {
            Fixture.Driver.Navigate().GoToUrl("http://localhost/orangehrm/symfony/web/index.php/pim/viewEmployeeList?sortField=firstMiddleName&sortOrder=ASC");
            for (int i = 0; i < 19; i++)
            {
                AutoDelete();
            }
        }
        private void AutoDelete()
        {
            Fixture.Driver.FindElement(By.Id("ohrmList_chkSelectAll")).Click();
            Fixture.Driver.FindElement(By.Id("ohrmList_chkSelectRecord_2")).Click();
            Fixture.Driver.FindElement(By.Id("ohrmList_chkSelectRecord_5")).Click();
            Fixture.Driver.FindElement(By.Id("ohrmList_chkSelectRecord_4")).Click();
            Fixture.Driver.FindElement(By.Id("btnDelete")).Click();
            Fixture.Driver.FindElement(By.Id("dialogDeleteBtn")).Click();
        }

        //[Theory]
        //[InlineData(1000)]
        public void DeletePost(int num)
        {
            Actions action = new Actions(Fixture.Driver);
            Fixture.Driver.FindElement(By.CssSelector("#menu_buzz_viewBuzz > b")).Click();
            int baseValue = 100, current = baseValue;
            for (int i = num; i >= 1; i--){
                try
                {
                    Fixture.Driver.FindElement(By.Id(i.ToString())).Click();
                    Thread.Sleep(100);
                    var obj = Fixture.Driver.FindElement(By.Id($"deleteShare_{i}"));
                    Thread.Sleep(100);
                    action.MoveToElement(obj).Click().Perform();
                    Thread.Sleep(100);
                    obj = Fixture.Driver.FindElement(By.Id("delete_confirm"));
                    Thread.Sleep(100);
                    action.MoveToElement(obj).Click().Perform();
                    Thread.Sleep(2000);
                }
                catch {
                    if (current == 0)
                    {
                        Fixture.Driver.FindElement(By.CssSelector("#menu_buzz_viewBuzz > b")).Click();
                        i += baseValue;
                        current = baseValue;
                    }
                    else
                    {
                        current--;
                    }
                }
            }
        }

        [Theory]
        [ClassData(typeof(TestDataAccount))]
        public void AddAccount(Account account)
        {
            Fixture.Driver.Navigate().GoToUrl("http://localhost/orangehrm/symfony/web/index.php/admin/viewSystemUsers");
            Fixture.Driver.FindElement(By.Id("btnAdd")).Click();
            Fixture.Driver.FindElement(By.Id("systemUser_employeeName_empName")).Click();
            Fixture.Driver.FindElement(By.Id("systemUser_employeeName_empName")).SendKeys(account.EmployeeName);
            Fixture.Driver.FindElement(By.Id("systemUser_employeeName_empName")).SendKeys(Keys.Enter);
            Fixture.Driver.FindElement(By.Id("systemUser_userName")).Click();
            Fixture.Driver.FindElement(By.Id("systemUser_userName")).SendKeys(account.Username);
            Thread.Sleep(500);
            Fixture.Driver.FindElement(By.Id("systemUser_password")).Click();
            Fixture.Driver.FindElement(By.Id("systemUser_password")).SendKeys(account.Password);
            Fixture.Driver.FindElement(By.Id("systemUser_confirmPassword")).Click();
            Fixture.Driver.FindElement(By.Id("systemUser_confirmPassword")).SendKeys(account.Password);
            Thread.Sleep(2000);
            Fixture.Driver.FindElement(By.Id("btnSave")).Click();
        }
    }

    public class ChromeTest : SuiteTests<TestSuite1Fixture<Chrome>, Chrome>
    {
        public ChromeTest(TestSuite1Fixture<Chrome> fixture) : base(fixture)
        {
            fixture.Browser = new Chrome();
        }
    }

    public class ChromeTest2 : SuiteTests<TestSuite1Fixture<Firefox>, Firefox>
    {
        public ChromeTest2(TestSuite1Fixture<Firefox> fixture) : base(fixture)
        {
            fixture.Browser = new Firefox();
        }
    }
}