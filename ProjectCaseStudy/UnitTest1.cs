// Generated by Selenium IDE
using System;
using System.Collections.Generic;
using System.Collections;
using System.Linq;
using System.Threading;
using OpenQA.Selenium;
using OpenQA.Selenium.Interactions;
using ProjectCaseStudy.Data;
using Xunit;



namespace ProjectCaseStudy
{
    public abstract class TheoryData : IEnumerable<object[]>
    {
        readonly List<object[]> data = new();

        protected void AddRow(params object[] values)
        {
            data.Add(values);
        }

        public IEnumerator<object[]> GetEnumerator()
        {
            return data.GetEnumerator();
        }
        IEnumerator IEnumerable.GetEnumerator() => GetEnumerator();
    }

    public class TheoryData<T> : TheoryData
    {
        public void Add(T data)
        {
            if (data == null) return;
            AddRow(data);
        }
    }

    public abstract class TestDataBase<T> : TheoryData<T>
    {
        protected abstract JsonIO<T> IO { get; }
        protected abstract string FilePath { get; }

        public TestDataBase()
        {
            var data = IO.LoadFile(FilePath);

            for (int i = 0; i < 1000; i++)
            {
                Add(data[i]);
            }
        }

    }

    public class TestDataJobTitle : TestDataBase<JobTitleData>
    {
        private readonly JobTitleIO _io = new();
        protected override JsonIO<JobTitleData> IO => _io;

        protected override string FilePath => "Data\\data.json";
    }

    public class TestDataBuzz : TestDataBase<BuzzPost>
    {
        private readonly BuzzPostIO _io = new();
        protected override JsonIO<BuzzPost> IO => _io;

        protected override string FilePath => "Data\\dataBuzz.json";
    }

    public class TestDataEmployee : TestDataBase<Employee>
    {
        private readonly EmployeeIO _io = new();
        protected override JsonIO<Employee> IO => _io;

        protected override string FilePath => "Data\\dataEmployee.json";
    }

    public abstract class SuiteTests<T> : IClassFixture<T> where T : ConfigurationFixture
    {
        private readonly T Fixture;
        public SuiteTests(T fixture)
        {
            Fixture = fixture;
        }

        public static IEnumerable<object[]>? GetData(int numTests)
        {
            throw new NotImplementedException();
        }
        [Theory]
        [ClassData(typeof(TestDataJobTitle))]
        public void Performance(JobTitleData data)
        {
            if (data == null) return;

            //Navigate to job title
            Actions mouseMove = new(Fixture.Driver);
            var adminModule = Fixture.Driver.FindElement(By.Id("menu_admin_viewAdminModule"));
            mouseMove.MoveToElement(adminModule).Perform();
            var adminJob = Fixture.Driver.FindElement(By.Id("menu_admin_Job"));
            mouseMove.MoveToElement(adminJob).Perform();
            Fixture.Driver.FindElement(By.Id("menu_admin_viewJobTitleList")).Click();

            Fixture.Driver.FindElement(By.Id("btnAdd")).Click();
            Fixture.Driver.FindElement(By.Id("jobTitle_jobTitle")).Click();
            Fixture.Driver.FindElement(By.Id("jobTitle_jobTitle")).SendKeys(data.Title);
            Fixture.Driver.FindElement(By.Id("jobTitle_jobDescription")).Click();
            Fixture.Driver.FindElement(By.Id("jobTitle_jobDescription")).SendKeys(data.Description);
            //Fixture.Driver.FindElement(By.Id("jobTitle_jobSpec")).Click(); => cause error (can't click)
            Fixture.Driver.FindElement(By.Id("jobTitle_jobSpec")).SendKeys(data.File);
            Fixture.Driver.FindElement(By.Id("jobTitle_note")).Click();
            Fixture.Driver.FindElement(By.Id("jobTitle_note")).SendKeys(data.Note);
            Fixture.Driver.FindElement(By.Id("btnSave")).Click();
        }


        [Theory]
        [ClassData(typeof(TestDataBuzz))]
        public void BuzzUpload(BuzzPost data)
        {
            Fixture.Driver.Navigate().GoToUrl("http://localhost/orangehrm/symfony/web/index.php/buzz/viewBuzz");
            Fixture.Driver.FindElement(By.Id("images-tab-label")).Click();
            Fixture.Driver.FindElement(By.Id("phototext")).Click();
            Fixture.Driver.FindElement(By.Id("phototext")).SendKeys(data.Content);
            //Fixture.Driver.FindElement(By.Id("image-upload-button")).Click();
            for(int i = 0; i < data.Images.Length; i++)
            {
                Fixture.Driver.FindElement(By.Id("photofile")).SendKeys(data.Images[i]);
            }
            Fixture.Driver.FindElement(By.Id("imageUploadBtn")).Click();
        }

        [Theory]
        [ClassData(typeof(TestDataEmployee))]
        public void AddEmployee(Employee data)
        {
            Fixture.Driver.Navigate().GoToUrl("http://localhost/orangehrm/symfony/web/index.php/pim/addEmployee");
            Fixture.Driver.FindElement(By.Id("menu_pim_addEmployee")).Click();
            Fixture.Driver.FindElement(By.Id("firstName")).Click();
            Fixture.Driver.FindElement(By.Id("firstName")).SendKeys(data.FirstName);
            Fixture.Driver.FindElement(By.Id("middleName")).Click();
            Fixture.Driver.FindElement(By.Id("middleName")).SendKeys("Noob");
            Fixture.Driver.FindElement(By.Id("lastName")).Click();
            Fixture.Driver.FindElement(By.Id("lastName")).SendKeys(data.LastName);
            Fixture.Driver.FindElement(By.Id("employeeId")).Click();
            Fixture.Driver.FindElement(By.Id("employeeId")).SendKeys(data.ID);
            Fixture.Driver.FindElement(By.Id("chkLogin")).Click();
            Fixture.Driver.FindElement(By.Id("user_name")).Click();
            Fixture.Driver.FindElement(By.Id("user_name")).SendKeys("username");
            Fixture.Driver.FindElement(By.Id("user_password")).Click();
            Fixture.Driver.FindElement(By.Id("user_password")).SendKeys("Quanghuy@2807");
            Fixture.Driver.FindElement(By.Id("re_password")).Click();
            Fixture.Driver.FindElement(By.Id("re_password")).SendKeys("Quanghuy@2807");
            Fixture.Driver.FindElement(By.Id("btnSave")).Click();
        }
    }

    public class ChromeTest : SuiteTests<ConfigurationChromeFixture>
    {
        public ChromeTest(ConfigurationChromeFixture fixture) : base(fixture)
        {
        }
    }
}